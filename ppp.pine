// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © myu112

//@version=5
indicator("マイスクリプト", overlay = true)
//paletteColor = close <= open ? color.green : color.red
paletteColor = close <= open ? color.black : color.white
plotcandle(open, high, low, close, color = paletteColor)

//plot(close)
//plot(open)

// -------------------------
// 移動平均線：宣言、表示
// -------------------------
ma5 = ta.sma(close, 5)
ma20 = ta.sma(close, 20)
ma60 = ta.sma(close, 60)
ma75 = ta.sma(close, 75)
ma100 = ta.sma(close, 100)
ma200 = ta.sma(close, 200)
ma300 = ta.sma(close, 300)
p1PlotID = plot(ma5, "sma 5", color = color.red, linewidth = 4)
p2PlotID = plot(ma20, "sma 20", color = color.green, linewidth = 2)
plot(ma60, "sma 60", color = color.blue, linewidth = 2)
plot(ma75, "sma 75", color = color.olive, linewidth = 1)
plot(ma100, "sma 100", color = color.orange, linewidth = 1)
plot(ma200, "sma 200", color = color.aqua, linewidth = 1)
plot(ma300, "sma 300", color = color.fuchsia, linewidth = 1)

//fill(p1PlotID, p2PlotID, line1 > line2 ? color.new(color.green, 90) : color.new(color.red, 90))

// -------------------------
// ゾーン：宣言、表示
// -------------------------
// Default color constants using tranparency of 25.
P1 = color.new(color.red, 80)
P2 = color.new(color.red, 70)
P3 = color.new(color.red, 60)
D1 = color.new(color.blue, 60)
D2 = color.new(color.blue, 70)
D3 = color.new(color.blue, 80)
NO_COLOR     = color(na)
ZZ = color.new(color.gray, 60)

// Allow user to change the colors.
zP1 = input.color(P1, "Pre-market")
zP2 = input.color(P2, "Pre-market")
zP3 = input.color(P3, "Pre-market")
zD1 = input.color(D1, "Pre-market")
zD2 = input.color(D2, "Pre-market")
zD3 = input.color(D3, "Pre-market")
z00 = input.color(ZZ, "Pre-market")
//bgcolor(color, offset, editable, show_last, title)

z3 = ma5 > ma20 and ma20 > ma60
z2 = ma5 > ma20 and ma5 > ma60
z1 = ma5 > ma20 and ma5 < ma60
zd3 = ma5 < ma20 and ma5 > ma60
zd2 = ma5 < ma60 and ma20 > ma60
zd1 = ma5 < ma60 and ma20 < ma60

zoneColor = if z3
    zP3
else if z2
    zP2
else if z1
    zP1
else if zd3
    zD3
else if zd2
    zD2
else if zd1
    zD1
else 
    NO_COLOR

bgcolor(zoneColor)


// -------------------------
// シグナル：宣言、表示
// -------------------------
//longSignal = ta.rising(close, 2) and ta.rising(high, 2) and (na(volume) or ta.rising(volume, 2))
//longSignal = ma5 > ma20 and ma5 < close and ta.rising(close, 2) and ta.rising(high, 2)
//shortSignal = ma5 < ma20 and ma5 > close and ta.falling(close, 2) and ta.falling(high, 2)

//重要度レベル1
kh = open * 1.02 <= close
gkh = open > close * 1.02 
longSignal = (z1 or z2 or z3) and kh and ta.rising(close, 1)
shortSignal = (zd1 or zd2 or zd3) and gkh and ta.falling(close, 2)
plotshape(longSignal, "Long", shape.arrowup, location.belowbar, color.red, text = "🔥")
plotshape(shortSignal, "Short", shape.arrowdown, location.abovebar, color.blue, text = "💧")

//重要度レベル2
longSignal2 = (zd1) and ta.rising(close, 1) and ta.rising(high, 1)
shortSignal2 = (z3) and ta.falling(close, 2) and ta.falling(high, 2)
plotshape(longSignal2, "Long", shape.arrowup, location.belowbar, color.red, text = "🚩")
plotshape(shortSignal2, "Short", shape.arrowdown, location.abovebar, color.blue, text = "🏴")

//line.new(bar_index - 10, high[10], bar_index, low, width = 1, color=color.red)
n = 60
h = ta.highest(high, n)
l = ta.lowest(low, n)
plot(h, '直近N日の高値値', color=color.red)
plot(l, '直近N日の最安値', color=color.navy)

hline(8750.14, title='Pi', color=color.black, linestyle=hline.style_dotted, linewidth=3)
//h1 = hline(8000)
//h2 = hline(2000)
//h3 = hline(1500)
//h4 = hline(2500)
//fill(h1, h2, color.new(color.yellow, 90))
//fill(h3, h4, color.new(color.lime, 90))



//lbl = label.new(bar_index, na)
//if ma5 == ma20
    //label.set_text( lbl, "green")
    //label.set_color(lbl, color.green)
    //label.set_yloc( lbl, yloc.belowbar)
    //label.set_style(lbl, label.style_circle)



// -------------------------
// ボリンジャーバンド：宣言、表示
// -------------------------
drow_bb() =>
    ret = close

plot(drow_bb())

maLengthInput = input.int(10,           "MA length", inline = "01", minval = 1)
maColorInput  = input.color(color.aqua, "",          inline = "01")
bbFactorInput = input.float(2,        "BB factor", inline = "02", minval = 0, step = 0.5)
bbColorInput  = input.color(color.gray, "",          inline = "02")
showBBInput   = input.bool(true,        "Show BB",   inline = "02")
ma      = ta.sma(close, maLengthInput)
bbWidth = ta.stdev(ma, maLengthInput) * bbFactorInput
bbHi    = ma + bbWidth
bbLo    = ma - bbWidth
bbHiColor = color.new(bbColorInput, high > bbHi ? 60 : 0)
bbLoColor = color.new(bbColorInput, low  < bbLo ? 60 : 0)
plot(ma, "MA", maColorInput)
plot(showBBInput ? bbHi : na, "BB Hi", bbHiColor, 1)
plot(showBBInput ? bbLo : na, "BB Lo", bbLoColor, 1)


// -------------------------
// MACD：宣言、表示
// -------------------------
//[macdLine, signalLine, histLine] = ta.macd(close, 12, 26, 9)
//plot(macdLine, color=color.blue)
//plot(signalLine, color=color.orange)
//plot(histLine, color=color.red, style=plot.style_histogram)
